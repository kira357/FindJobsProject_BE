// <auto-generated />
using System;
using FindJobsProject.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindJobsProject.Migrations
{
    [DbContext(typeof(FindJobsContext))]
    partial class FindJobsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindJobsProject.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "15904564-ae5f-4703-906e-c2b387a07397",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f52734c6-4614-4bc8-894a-8feeab71bef0"),
                            ConcurrencyStamp = "cc945dfa-7651-4517-95a9-9e9b2d9ec31f",
                            Description = "Recruitment role",
                            Name = "Recruitment",
                            NormalizedName = "RECRUITMENT"
                        });
                });

            modelBuilder.Entity("FindJobsProject.Data.Entities.CandidateJob", b =>
                {
                    b.Property<Guid>("CandicateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CandicateId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("CandidateJob");
                });

            modelBuilder.Entity("FindJobsProject.Data.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DealineForSubmission")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("SalaryMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalaryMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SalaryUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("FindJobsProject.Database.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("IdQrCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1975d72-fa56-4f45-99b8-455036bec99f",
                            Email = "quochieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            FullName = "Hồ Quốc Hiếu",
                            LastName = "Hồ Quốc",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCHIEU@GMAIL.COM",
                            NormalizedUserName = "QUOCHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMvutHM2k7WgcN6CLyvtai76htCa9nVYlQZptDmZIL9tRigWENuXAeYo9C2ZiRmM8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt1.png",
                            UserName = "quochieu@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("157b9908-7d9c-4d3c-ad32-a15db858ac34"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76a363e8-8ae0-4f12-9fc5-52baf3dbfe3e",
                            Email = "lehieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            FullName = "Nguyễn Phước Lê",
                            LastName = "Nguyễn Phước Lê",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEHIEU@GMAIL.COM",
                            NormalizedUserName = "LEHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvBkQ+85nsQL5AEYhEr5xa/xoxhl6g65u0wi5V9wQfmIJ4xoZGywfqlqNjf9Qe3Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt2.png",
                            UserName = "lehieu@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6c06a9-e0c7-4d63-bd24-5f3ece98ebc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b320121-c9cd-4c71-94f8-e08c2e83d0aa",
                            Email = "locpv@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            FullName = "Phan Văn Lộc",
                            LastName = "Phan Văn",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOCPV@GMAIL.COM",
                            NormalizedUserName = "LOCPV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfyWWfL4tinl+7IK1V0fGkCcgMXL3W0uDlW1SAChRWKwy5Bzq3ZSOOKw+4j8pbPEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt3.png",
                            UserName = "locpv@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("041684eb-cf97-40c6-881c-b766ae9c416a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56167ff9-fa9e-40b7-81d4-d7b18b73bea5",
                            Email = "giahuy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huy",
                            FullName = "Huỳnh Gia Huy",
                            LastName = "Huỳnh Gia",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIAHUY@GMAIL.COM",
                            NormalizedUserName = "GIAHUY@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdQpru/A7cURNaORchdQYVIZwHZeiWwaIrwsaTi8UOmS6jl8LsSLsf1RGMb7kx30Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt4.png",
                            UserName = "giahuy@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d7b7ce9e-f39f-4fea-9f2a-487a5355fbe9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b29dbfe-30d4-438e-a53d-3b4126777956",
                            Email = "vanlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            FullName = "Sằn Văn Long",
                            LastName = "Sằn Văn",
                            LockoutEnabled = false,
                            NormalizedEmail = "VANLONG@GMAIL.COM",
                            NormalizedUserName = "VANLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAiXY10zL+AYBLpAqJ2CwmsambXCLAQ2ZFqmMbRrsdUzsB5IaTX7f+XUrYV6PYivrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt5.png",
                            UserName = "vanlong@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9bc1bf33-d875-42b2-a39e-b0cfc3fb6f2c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82fcb3b2-7297-44b7-90f6-97709e811317",
                            Email = "ankhang@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Khang",
                            FullName = "Đỗ Phúc An Khang",
                            LastName = "Đỗ Phúc An Khang",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANKHANG@GMAIL.COM",
                            NormalizedUserName = "ANKHANG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIIMWunlb/DtpEJf+2onBVqVtLF3V+eMSVVjSrjw8CMlodATO8kEhOpNhc5b5bvhZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlAvatar = "Images/avt6.png",
                            UserName = "ankhang@gmail.com"
                        });
                });

            modelBuilder.Entity("FindJobsProject.Database.Entities.RecruitmentJob", b =>
                {
                    b.Property<Guid>("RecruitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RecruitmentId", "JobsId");

                    b.HasIndex("JobsId");

                    b.ToTable("RecruitmentJob");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("157b9908-7d9c-4d3c-ad32-a15db858ac34"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("be6c06a9-e0c7-4d63-bd24-5f3ece98ebc0"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("041684eb-cf97-40c6-881c-b766ae9c416a"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("d7b7ce9e-f39f-4fea-9f2a-487a5355fbe9"),
                            RoleId = new Guid("f52734c6-4614-4bc8-894a-8feeab71bef0")
                        },
                        new
                        {
                            UserId = new Guid("9bc1bf33-d875-42b2-a39e-b0cfc3fb6f2c"),
                            RoleId = new Guid("f52734c6-4614-4bc8-894a-8feeab71bef0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("FindJobsProject.Data.Entities.CandidateJob", b =>
                {
                    b.HasOne("FindJobsProject.Database.Entities.AppUser", "Candicate")
                        .WithMany("CandidateJob")
                        .HasForeignKey("CandicateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsProject.Data.Entities.Job", "Job")
                        .WithMany("CandidateJob")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FindJobsProject.Database.Entities.RecruitmentJob", b =>
                {
                    b.HasOne("FindJobsProject.Data.Entities.Job", "Jobs")
                        .WithMany("RecruitmentJob")
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindJobsProject.Database.Entities.AppUser", "Recruitments")
                        .WithMany("RecruitmentJob")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
